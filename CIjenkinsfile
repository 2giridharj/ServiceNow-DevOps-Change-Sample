def packageName = "app-devops-package.war"

def artifactname = "app-devops.jar"
def version = "1.${BUILD_NUMBER}"
def semanticVersion = "1.${BUILD_NUMBER}.0"

def repoName = "pramaraju96/DevOps-Test"
def pipelineName = "${JOB_NAME}"

def changeRequestId = "defaultChangeRequestId"
def stageName = "Deploy"

def releasePipelineName = "CD Pipeline"

pipeline {
	agent any
	
	tools {
		maven 'Maven'
	}

	environment {
		SCANNER_HOME = tool 'sonarScanner'
		SECURITY_APPLICATION_NAME = 'ServiceNow DevOps App#1'
		SECURITY_SCANNER_NAME = 'Veracode'
	} 

	stages {
		stage('Build') {
			steps {
				sh 'mvn -B -DskipTests clean compile'
			}
		}

		stage('Test') {
			steps {
			  	sh 'mvn test'
				sleep(5);
			}
			post {
				always {
					junit "**/target/surefire-reports/*.xml"
				}
			}
		}

		stage('Register Artifact') {
			steps {
				snDevOpsArtifact(artifactsPayload: """
				{
				"artifacts":
				[
				    {
				        "name": "${artifactname}",
				        "version": "${version}",
				        "semanticVersion": "${semanticVersion}",
				        "repositoryName": "${repoName}"
				    }
				],
				"branchName": "main"
				}""")

				// uncomment the below block of code to use artifact step with JFrog
				/*
				sh 'mvn package'
				
				echo "Uploading the artifacts to JFrog"

				script{
					def server = Artifactory.server 'ramadevops'
					def uploadSpec = """{
						"files": [{
							"pattern": "target/devops-e2e-1.40.0-SNAPSHOT.jar",
							"target": "devops-jfrog-local-repo/"
						}]
					}"""

					def buildInfo = server.upload(uploadSpec) 
					server.publishBuildInfo buildInfo
					sleep(5);
				}
				*/

			}     
		}

		stage('Sonar Scan') {
			steps {
				echo 'Running sonar scans'
				//sonarSummaries()
			}
		}

		stage('Security Scan') {
			steps {
				// uncomment below line of code to trigger a new Veracode scan
				// to get the security event back to ServiceNow, input 'waitForScan' to true
				// veracode applicationName: "${env.VERACODE_APPLICATION_NAME}", scanName: "${BUILD_TAG}", uploadIncludesPattern: 'target/*.jar', vid: "<apiId>", vkey: "<apiKey>", waitForScan : true
				echo "${SECURITY_SCANNER_NAME}"
				echo "${SECURITY_APPLICATION_NAME}"
				snDevOpsSecurityResult securityResultAttributes: '{"scanner": "${SECURITY_SCANNER_NAME}", "applicationName": "${SECURITY_APPLICATION_NAME}", "securityToolId": "4e9ecd6277153110047913c6ab5a99c7"}'
			}
		}
	}
	post{
		success{
			script{
				echo "${releasePipelineName}"
				build job: "${releasePipelineName}"
			}
		}
	}
}

def sonarSummaries() {
	withSonarQubeEnv(installationName: 'ramasonarcloud'){
		sh 'mvn clean verify sonar:sonar \
		    -Dsonar.login=1926d793f92181dd0ac406335d4d4bea392a3023 \
		    -Dsonar.host.url=https://sonarcloud.io \
		    -Dsonar.organization=pramaraju96 \
		    -Dsonar.projectKey=pramaraju96_DevOps-Test'
    }
}
